#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <time.h>
#include <string.h>
//-------------------------------------------------------------------------
#define ARR_LEN 50000
#define RAND_RANGE 200000
//-------------------------------------------------------------------------
void quick_sort (int arr[],int low,int high);
void swap(int* a, int* b);
int partition (int arr[], int low, int high);
void terminate();
void rs_search(int random_arr[ARR_LEN],int pipe_rs_to_dad[],int pipe_dad_to_rs[]);
//-------------------------------------------------------------------------

int main()
{
	srand(17);
    int random_arr [ARR_LEN];
     int i,rand_num,read_num,nbytes_dad,rs_min,rs_max,rs_sum=0,rs_avg;

       for(i=0;i<ARR_LEN ; i++){
        rand_num=rand()%RAND_RANGE;
        random_arr[i]=rand_num;
    }
       quick_sort(random_arr,0,ARR_LEN-1); //sort the array for binary search

    int pipe_dad_to_rs[2]; //create a pipe for dad tors_son
     if(pipe(pipe_dad_to_rs)==-1)
         terminate();
     int pipe_rs_to_dad[2]; //create a pipe for rs_son to dad
          if(pipe(pipe_rs_to_dad)==-1)
              terminate();
     // ssize_t ret;

     pid_t status;
     status=fork();
     if(status<0)
     terminate();

     if(status>0) {
    	 close(pipe_rs_to_dad[1]);
    	 close(pipe_dad_to_rs[0]); //father write,close read

    	 rand_num=rand()%RAND_RANGE;
    	 write(pipe_dad_to_rs[1],&rand_num,sizeof(int));
    	 nbytes_dad=read(pipe_rs_to_dad[0],&read_num,sizeof(int));
    	 rs_sum+=read_num;
    	 rs_min=read_num;
    	 rs_max=read_num; //set initial values to min & max
    	 //raffle numbers & sent to sons via pipes:
    	 for(i=0;i<999;i++){
    	 rand_num=rand()%RAND_RANGE;
    	 write(pipe_dad_to_rs[1],&rand_num,sizeof(int));
    	 nbytes_dad=read(pipe_rs_to_dad[0],&read_num,sizeof(int));
    	 rs_sum+=read_num;
    	 if(read_num>rs_max)
    		 rs_max=read_num;
    	 else if(read_num<rs_min)
    		 rs_min=read_num;
    	 }
    	 //make son finish:
    	 rand_num=-1;
    	 write(pipe_dad_to_rs[1],&rand_num,sizeof(int));
    	 //print details & close pipes"
    	 rs_avg=read_num/1000;
    	 printf("%d %d %d",rs_avg,rs_max,rs_min);
    	 close(pipe_dad_to_rs[1]);
    	 close(pipe_rs_to_dad[0]);
	 }

     if(status==0) {
    	 rs_search(random_arr,pipe_rs_to_dad,pipe_dad_to_rs);
     }
	return EXIT_SUCCESS;
}
//=========================================================================
//this function terminate the program if there is an error in fork
void terminate(){
    perror ("error in fork()/pipe");
    exit(EXIT_FAILURE);
}
//-------------------------------------------------------------------------
void rs_search(int random_arr[ARR_LEN],int pipe_rs_to_dad[],int pipe_dad_to_rs[]){
	int nbytes_son,i,num_from_pipe;
	time_t time_before,time_after,time_son;

	close(pipe_rs_to_dad[0]);
    close(pipe_dad_to_rs[1]); //son read,close write

    nbytes_son=read(pipe_dad_to_rs[0],&num_from_pipe,sizeof(int));

	     while(num_from_pipe!=-1){
	    	 time_before=time(NULL);
	    	 for(i=0;i<ARR_LEN;i++){
	    		 if(random_arr[i]==num_from_pipe)
	    			 break;
	    	 }
	    	 time_after=time(NULL);
	    	 time_son=time_after-time_before;
	    	 write(pipe_rs_to_dad[1],&time_son,sizeof(int));
	    	 nbytes_son=read(pipe_dad_to_rs[0],&num_from_pipe,sizeof(int));
	     }

	close(pipe_dad_to_rs[0]);
	close(pipe_rs_to_dad[1]);

	    	  exit( EXIT_SUCCESS);
}
//-------------------------------------------------------------------------
// A utility function to swap two elements
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
//-------------------------------------------------------------------------
/* This function takes last element as pivot, places
 the pivot element at its correct position in sorted
 array, and places all smaller (smaller than pivot)
 to left of pivot and all greater elements to right
 of pivot */
int partition (int arr[], int low, int high)
{
	int j;
    int pivot = arr[high];    // pivot
    int i = (low - 1);  // Index of smaller element

    for ( j = low; j <= high- 1; j++)
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
//-------------------------------------------------------------------------
/* The main function that implements QuickSort
 arr[] --> Array to be sorted,
 low  --> Starting index,
 high  --> Ending index */
void quick_sort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
         at right place */
        int pi = partition(arr, low, high);

        // Separately sort elements before
        // partition and after partition
        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}
//-------------------------------------------------------------------------
